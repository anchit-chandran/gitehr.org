{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GitEHR GitEHR is a decentralised and portable health record, powered by Git , cryptography, and open standards. Learn more","title":"GitEHR"},{"location":"#gitehr","text":"GitEHR is a decentralised and portable health record, powered by Git , cryptography, and open standards. Learn more","title":"GitEHR"},{"location":"design/","text":"Overview GitEHR has been designed to solve the problems inherent to medical records and to be extensible in the future. It aims to use low-tech solutions and be totally reliable. Natively GitEHR is a technical standard which no clinician would actually manually use. It is a foundational technology upon which other systems can be built which will make clinical workflows easy for clinicians.","title":"Overview"},{"location":"design/#overview","text":"GitEHR has been designed to solve the problems inherent to medical records and to be extensible in the future. It aims to use low-tech solutions and be totally reliable. Natively GitEHR is a technical standard which no clinician would actually manually use. It is a foundational technology upon which other systems can be built which will make clinical workflows easy for clinicians.","title":"Overview"},{"location":"design/audit-trail/","text":"","title":"Audit trail"},{"location":"design/longevity/","text":"Longevity Health records need to last a long time. In some cases they will exist before a person is born, and last until well after their death. However healthcare software is a different matter. Like all software there is a lifecycle to its existence. Companies start, some fail, some grow, some get acquired by bigger companies, some get dissolved, and others go bust. I think it's fair to say that software tends not to live as long as humans. In the current closed-source EHR world, we as users and managers of patient data don't have access to the source code of these software platforms. And sadly, because of the inseparably tight coupling of the patient record data structure to the database used inside the software platform, when software dies, it's very hard to salvage the patient data in any usable form. We need to ensure that patient records stand alone, separately from the database structure of any single proprietary software supplier. GitEHR separates the clinical record entirely from the software used to view it. The use of very old and simple technologies (flat files, directories, disks) helps to reduce the dependence that GitEHR has on the new and shiny , and makes it much more likely that as obsolete viewing and editing software reaches the end of its life, new software can be brought in to replace it pretty much seamlessly, and without affecting clinical care.","title":"Longevity"},{"location":"design/longevity/#longevity","text":"Health records need to last a long time. In some cases they will exist before a person is born, and last until well after their death. However healthcare software is a different matter. Like all software there is a lifecycle to its existence. Companies start, some fail, some grow, some get acquired by bigger companies, some get dissolved, and others go bust. I think it's fair to say that software tends not to live as long as humans. In the current closed-source EHR world, we as users and managers of patient data don't have access to the source code of these software platforms. And sadly, because of the inseparably tight coupling of the patient record data structure to the database used inside the software platform, when software dies, it's very hard to salvage the patient data in any usable form. We need to ensure that patient records stand alone, separately from the database structure of any single proprietary software supplier. GitEHR separates the clinical record entirely from the software used to view it. The use of very old and simple technologies (flat files, directories, disks) helps to reduce the dependence that GitEHR has on the new and shiny , and makes it much more likely that as obsolete viewing and editing software reaches the end of its life, new software can be brought in to replace it pretty much seamlessly, and without affecting clinical care.","title":"Longevity"},{"location":"design/no-lock-in/","text":"No Lock-In GitEHR is engineered to be an interoperable file format for clinical records, free from vendor lock-in. Vendor Lock-in is a well-known term in the technology industry, describing what happens when your data is tied inherently to a specific product. One of the mitigations for vendor lock-in is interoperable file formats. For example, if you are using a document editor to work on a .odf (or even .docx , to use a slightly less 'truly open' example) format file, then if your editor software becomes unaffordably expensive then you can switch to another editor. In healthcare and governmental IT in general, vendor lock-in seems to be a particular problem, because there are no interoperable file formats. Even quite simple data in simple IT systems is inextricably linked to the database schema of the software that has been procured. Vendor lock-in leads to problems throughout the entire software lifecycle. When new software is procured, the price for the Migration Leaving Loss of data","title":"No Lock-In"},{"location":"design/no-lock-in/#no-lock-in","text":"GitEHR is engineered to be an interoperable file format for clinical records, free from vendor lock-in. Vendor Lock-in is a well-known term in the technology industry, describing what happens when your data is tied inherently to a specific product. One of the mitigations for vendor lock-in is interoperable file formats. For example, if you are using a document editor to work on a .odf (or even .docx , to use a slightly less 'truly open' example) format file, then if your editor software becomes unaffordably expensive then you can switch to another editor. In healthcare and governmental IT in general, vendor lock-in seems to be a particular problem, because there are no interoperable file formats. Even quite simple data in simple IT systems is inextricably linked to the database schema of the software that has been procured. Vendor lock-in leads to problems throughout the entire software lifecycle. When new software is procured, the price for the Migration Leaving Loss of data","title":"No Lock-In"},{"location":"design/patient-centricity/","text":"Patient-centricity For as long as I can remember, informaticians and health technologists have been proposing the idea of 'Patient Centric Health Records'. But they have been unable to deliver a patient-centric record because the EHR uses a database and is thereby already inherently organisation-centric . Success Understanding the above is the single most important step to seeing why we cannot make further progress in EHRs without changing the paradigm. One patient, one record A GitEHR clinical record is only ever the record of one patient. This ensures clean separation for the data in any other patient records and organisational data. Organisations giving care keep a local record of the patient's care. Separation from Organisational information A GitEHR clinical reecord is completely separated from the records of other patients and any organisation-level information. This separation allows multiple organisations to be able to contribute to the GitEHR, in the same way that multiple contributors can work on the same Git repository. This separation also means that if, within your organisation, you need to perform database operations over multiple patients, then you can do this. A healthcare organisation might care for thousands or even millions of patients, so it is accepted that a database at organisation level might be useful. But this database must never be the canonical patient record.","title":"Patient-centricity"},{"location":"design/patient-centricity/#patient-centricity","text":"For as long as I can remember, informaticians and health technologists have been proposing the idea of 'Patient Centric Health Records'. But they have been unable to deliver a patient-centric record because the EHR uses a database and is thereby already inherently organisation-centric . Success Understanding the above is the single most important step to seeing why we cannot make further progress in EHRs without changing the paradigm.","title":"Patient-centricity"},{"location":"design/patient-centricity/#one-patient-one-record","text":"A GitEHR clinical record is only ever the record of one patient. This ensures clean separation for the data in any other patient records and organisational data. Organisations giving care keep a local record of the patient's care.","title":"One patient, one record"},{"location":"design/patient-centricity/#separation-from-organisational-information","text":"A GitEHR clinical reecord is completely separated from the records of other patients and any organisation-level information. This separation allows multiple organisations to be able to contribute to the GitEHR, in the same way that multiple contributors can work on the same Git repository. This separation also means that if, within your organisation, you need to perform database operations over multiple patients, then you can do this. A healthcare organisation might care for thousands or even millions of patients, so it is accepted that a database at organisation level might be useful. But this database must never be the canonical patient record.","title":"Separation from Organisational information"},{"location":"design/portability/","text":"Portability Being portable, and thereby interoperable, isn't something that GitEHR has to work hard on, since portability is an emergent property of being totally patient-centric . When the files of a record are represented in a single directory on a disk, they can be shared with other caregiving organisations easily. They can even be downloaded onto a portable storage medium (like a USB stick) and can be read, updated and used comprehensively in that state, for example if the patient goes off-grid because they are on an expedition or on a colony ship to Mars. Later, changes made can be merged back into the record.","title":"Portability"},{"location":"design/portability/#portability","text":"Being portable, and thereby interoperable, isn't something that GitEHR has to work hard on, since portability is an emergent property of being totally patient-centric . When the files of a record are represented in a single directory on a disk, they can be shared with other caregiving organisations easily. They can even be downloaded onto a portable storage medium (like a USB stick) and can be read, updated and used comprehensively in that state, for example if the patient goes off-grid because they are on an expedition or on a colony ship to Mars. Later, changes made can be merged back into the record.","title":"Portability"},{"location":"design/provenance/","text":"Trust Clinicians need to have absolute trust in the veracity of information in the clinical record, so GitEHR has been designed to ensure that, while it remains a distributed and decentralised system, the information contained within is completely trustworthy. This is achieved using simple, existing, reliable and trusted technology which is widely used to establish trust in other parts of tech: crpytographic signatures cryptographic hashes In fact, using these technologies to sign and audit-trail commits to the clinical record represents a significant advance on the current 'state of the art'. Existing audit-trailing is broken anyway In a typical Electronic Health Record ( EHR ) program in use today in healthcare organisations across the world, the clinical entries are saved into a database, and often (but not always!) there is an audit-trail built into the system, which ensures that if, for example, a nefarious user changed an entry after an adverse incident in order to avoid accountability, the tampering would be evident to the admins of such a system. But what is never seemingly challenged here is that this puts the locus of trust entirely with the admins of the EHR , the organisation's leadership itself, and also in the design of the EHR . If you think you can put your trust unequivocally within databases, admins, and more importantly the leaders of large organisations, then you are wrong. The UK Post Office Scandal Here is a cautionary tale of why, as a clinician, you can't trust your life and career to organisational database-level audit-trailing: The UK Post Office Scandal . In a miscarriage of justice of monumental proportions in the UK, a series of errors occurred in the system used to manage the Post Office's banking service. This resulted in large discrepancies including huge shortfalls of cash in the cash drawers at the end of the day. Every single one of these discrepancies was the fault of the system and its design . However its admins believed the system, not the users. The IT company which built the system believed the system, not the users. The Post Office's senior leadership backed the system for which they'd paid millions, not their own staff. A number of people were jailed, some committed suicide, many thousands of lives were ruined. An audit-trail system was built into this system but it didn't work. It's all too easy to imagine similar discrepancies occurring in clinical records. A really simple example is if the system failed to show a severe allergy alert to a clinician, and that clinician administers a drug which kills the patient. The system at fault but nobody will believe the clinician. It is far easier to scapegoat a clinician than to blame the multi-million pound EHR . The system admins will want to believe the EHR . The organisational leadership will want to believe the EHR . It's also possible that someone with admin access might be induced to change something in the audit-trail, which in current EHRs would be essentially undetectable. Why GitEHR is different Entries in a GitEHR are each cryptographically signed, meaning that the content of the entry is followed by a cryptographic signature of the content, which can be mathematically proven to have been created using the private key of the clinician. Assuming the private keys are kept properly secure, there's nobody else on the planet who could have made that entry. If any change is made to the content of the clinical entry, the cryptographic signature would be invalid, immediately exposing the amendment. Entries in a GitEHR are sequential, with each commit having a direct parent commit. In this way, commits cannot be reordered without changing the content, again such amendment would be immediately obvious. There is frequently a valid need to make a factual change to a clinical entry, and GitEHR supports this, by simply making the update a transparent, visible process in the commit tree. The record shows the updated version, which is often clinically safer, but the previous value can be viewed and it is entirely clear who made the change and why. GitEHR is completely open source, meaning that 'with enough eyes looking at a problem, all bugs are shallow' and we can expect that these most fundamental of GitEHR trust features will be extremely safe and reliable.","title":"Provenance"},{"location":"design/provenance/#trust","text":"Clinicians need to have absolute trust in the veracity of information in the clinical record, so GitEHR has been designed to ensure that, while it remains a distributed and decentralised system, the information contained within is completely trustworthy. This is achieved using simple, existing, reliable and trusted technology which is widely used to establish trust in other parts of tech: crpytographic signatures cryptographic hashes In fact, using these technologies to sign and audit-trail commits to the clinical record represents a significant advance on the current 'state of the art'.","title":"Trust"},{"location":"design/provenance/#existing-audit-trailing-is-broken-anyway","text":"In a typical Electronic Health Record ( EHR ) program in use today in healthcare organisations across the world, the clinical entries are saved into a database, and often (but not always!) there is an audit-trail built into the system, which ensures that if, for example, a nefarious user changed an entry after an adverse incident in order to avoid accountability, the tampering would be evident to the admins of such a system. But what is never seemingly challenged here is that this puts the locus of trust entirely with the admins of the EHR , the organisation's leadership itself, and also in the design of the EHR . If you think you can put your trust unequivocally within databases, admins, and more importantly the leaders of large organisations, then you are wrong.","title":"Existing audit-trailing is broken anyway"},{"location":"design/provenance/#the-uk-post-office-scandal","text":"Here is a cautionary tale of why, as a clinician, you can't trust your life and career to organisational database-level audit-trailing: The UK Post Office Scandal . In a miscarriage of justice of monumental proportions in the UK, a series of errors occurred in the system used to manage the Post Office's banking service. This resulted in large discrepancies including huge shortfalls of cash in the cash drawers at the end of the day. Every single one of these discrepancies was the fault of the system and its design . However its admins believed the system, not the users. The IT company which built the system believed the system, not the users. The Post Office's senior leadership backed the system for which they'd paid millions, not their own staff. A number of people were jailed, some committed suicide, many thousands of lives were ruined. An audit-trail system was built into this system but it didn't work. It's all too easy to imagine similar discrepancies occurring in clinical records. A really simple example is if the system failed to show a severe allergy alert to a clinician, and that clinician administers a drug which kills the patient. The system at fault but nobody will believe the clinician. It is far easier to scapegoat a clinician than to blame the multi-million pound EHR . The system admins will want to believe the EHR . The organisational leadership will want to believe the EHR . It's also possible that someone with admin access might be induced to change something in the audit-trail, which in current EHRs would be essentially undetectable.","title":"The UK Post Office Scandal"},{"location":"design/provenance/#why-gitehr-is-different","text":"Entries in a GitEHR are each cryptographically signed, meaning that the content of the entry is followed by a cryptographic signature of the content, which can be mathematically proven to have been created using the private key of the clinician. Assuming the private keys are kept properly secure, there's nobody else on the planet who could have made that entry. If any change is made to the content of the clinical entry, the cryptographic signature would be invalid, immediately exposing the amendment. Entries in a GitEHR are sequential, with each commit having a direct parent commit. In this way, commits cannot be reordered without changing the content, again such amendment would be immediately obvious. There is frequently a valid need to make a factual change to a clinical entry, and GitEHR supports this, by simply making the update a transparent, visible process in the commit tree. The record shows the updated version, which is often clinically safer, but the previous value can be viewed and it is entirely clear who made the change and why. GitEHR is completely open source, meaning that 'with enough eyes looking at a problem, all bugs are shallow' and we can expect that these most fundamental of GitEHR trust features will be extremely safe and reliable.","title":"Why GitEHR is different"},{"location":"design/redundancy/","text":"Redundancy Every organisation providing care to a patient keeps a complete copy of the entire healthcare record. Health records are not large in the context of modern data management. This means that all the organisations that a patient has allowed access to their medical record keep an up to date copy of the record. Distributing the storage of medical records in this was makes them extremely resilient to loss, deletion, corruption, or vandalism. Tamper resistance In the same way that blockchains use consensus to make sure that there is only one version of the truth, records that have been altered in only one place immediately stand out as having been altered.","title":"Redundancy"},{"location":"design/redundancy/#redundancy","text":"Every organisation providing care to a patient keeps a complete copy of the entire healthcare record. Health records are not large in the context of modern data management. This means that all the organisations that a patient has allowed access to their medical record keep an up to date copy of the record. Distributing the storage of medical records in this was makes them extremely resilient to loss, deletion, corruption, or vandalism.","title":"Redundancy"},{"location":"design/redundancy/#tamper-resistance","text":"In the same way that blockchains use consensus to make sure that there is only one version of the truth, records that have been altered in only one place immediately stand out as having been altered.","title":"Tamper resistance"},{"location":"design/security/","text":"","title":"Security"},{"location":"design/simplicity/","text":"Simplicity Content of the health record should be in plain text, in files on disk in plain text so that the content is readable even in low-tech environments. (Ideally a viewer will render this plain text into a much more usable and feature-rich application view. But you have the text-on-disk view there as a fallback.) in files because files can easily be made to work interoperably across all operating systems. on disk , as opposed to being in a database* Note yes databases are also on disk somewhere, we know this, but there is a difference between data being buried in a database and being a file on disk. New entries in the record should be in a new file Medical practice can usually be distilled down to an 'atomic unit of care' which is about the right size for resultant clinical record entries. For a clinic visit one might expect a single entry summarising the visit, or possibly a few linked entries All GitEHR entries are linkable As modern clinical records get larger and more complex, clinicians struggle to find specific items of data. The internet has solved this problem but the use of the URL or internet 'link' - yet this simplest of technologies has not found its way into healthcare records.","title":"Simplicity"},{"location":"design/simplicity/#simplicity","text":"","title":"Simplicity"},{"location":"design/simplicity/#content-of-the-health-record-should-be-in-plain-text-in-files-on-disk","text":"in plain text so that the content is readable even in low-tech environments. (Ideally a viewer will render this plain text into a much more usable and feature-rich application view. But you have the text-on-disk view there as a fallback.) in files because files can easily be made to work interoperably across all operating systems. on disk , as opposed to being in a database* Note yes databases are also on disk somewhere, we know this, but there is a difference between data being buried in a database and being a file on disk.","title":"Content of the health record should be in plain text, in files on disk"},{"location":"design/simplicity/#new-entries-in-the-record-should-be-in-a-new-file","text":"Medical practice can usually be distilled down to an 'atomic unit of care' which is about the right size for resultant clinical record entries. For a clinic visit one might expect a single entry summarising the visit, or possibly a few linked entries","title":"New entries in the record should be in a new file"},{"location":"design/simplicity/#all-gitehr-entries-are-linkable","text":"As modern clinical records get larger and more complex, clinicians struggle to find specific items of data. The internet has solved this problem but the use of the URL or internet 'link' - yet this simplest of technologies has not found its way into healthcare records.","title":"All GitEHR entries are linkable"},{"location":"design/structure/","text":"","title":"Structure"},{"location":"introduction/","text":"GitEHR GitEHR is a decentralised and portable health record, powered by Git , cryptography, and open standards. Databases Considered Harmful Since I began working in health technology over ten years ago, I've constantly struggled with how we can make a health record that is interoperable and portable. Much work is already out there on health interoperability, and I have finally, and sadly, come to the conclusion that it's all misguided. Adoption of databases for the content of the health record was the wrong path and has resulted in total chaos across health tech, vast sums of wasted money, and records which are not in any way interoperable. Traditional health ineroperability focuses on sending data from one Organisation-Centric Database to a different Organisation-Centric Database . Looking at examples from other parts of the tech world, there are no successful examples of that approach working at scale. What does work is sending files. Distributed Version Control Software such as Git provides an excellent example of how to engineer multi-contributor, secure, private repositories which are agnostic of the software being used to view and manipulate them. Throughout my health informatics career, I've tried to learn as much as possible about how existing solutions in technology could be applied to the health tech space. We don't always need to do our own health-specific thing. Many of the problems we see in health tech are already solved in the wider tech world, hence GitEHR draws extensively on existing technology. There might be areas where we do need a healthcare-specialised technology, but the majority will use tried and tested existing software. Rob Dyke Says \"All software has already been written\" Databases are Organisation-centric By Definition When you build a system which uses a database, it's hard to go to all the effort of creating the database and then use it for one patient. You could, but nobody is going to do this, because part of the point of having a database is to aggregate and index data across your whole organisation. Databases work fine within the walls of your organisation. But the problem comes when you try to interoperate this database with other databases at other organisations. Even where organisations have the exact same EHR deployed, the local deployment customisations that have inevitably been made make it hard (if not impossible) to move data around. If you can move data, there is usually some work involved in 'translating' the data from one database to another. And this has to be done between every single organisation and for every item of data. This rapidly becomes unworkable. Some people think the solution to this is simply to make the databases BIGGER . But that just moves the problem rather than solving it. You simply trade local inter-organisational interoperability problems for different and harder problems at regional, national, or international, (or interplanetary) scale. We have to change the paradigm, and I think GitEHR is the start of the road for that change. We need an interoperable and extensible file format for medical records. It will be an open standard and the reference implementation will be open source. Many other implementations can exist. Many platforms for the reading, writing, and processing of these records can exist. It will solve the problem of interoperability and will make a start on solving many other unsolved problems of health technology.","title":"GitEHR"},{"location":"introduction/#gitehr","text":"GitEHR is a decentralised and portable health record, powered by Git , cryptography, and open standards.","title":"GitEHR"},{"location":"introduction/#databases-considered-harmful","text":"Since I began working in health technology over ten years ago, I've constantly struggled with how we can make a health record that is interoperable and portable. Much work is already out there on health interoperability, and I have finally, and sadly, come to the conclusion that it's all misguided. Adoption of databases for the content of the health record was the wrong path and has resulted in total chaos across health tech, vast sums of wasted money, and records which are not in any way interoperable. Traditional health ineroperability focuses on sending data from one Organisation-Centric Database to a different Organisation-Centric Database . Looking at examples from other parts of the tech world, there are no successful examples of that approach working at scale. What does work is sending files. Distributed Version Control Software such as Git provides an excellent example of how to engineer multi-contributor, secure, private repositories which are agnostic of the software being used to view and manipulate them. Throughout my health informatics career, I've tried to learn as much as possible about how existing solutions in technology could be applied to the health tech space. We don't always need to do our own health-specific thing. Many of the problems we see in health tech are already solved in the wider tech world, hence GitEHR draws extensively on existing technology. There might be areas where we do need a healthcare-specialised technology, but the majority will use tried and tested existing software. Rob Dyke Says \"All software has already been written\"","title":"Databases Considered Harmful"},{"location":"introduction/#databases-are-organisation-centric-by-definition","text":"When you build a system which uses a database, it's hard to go to all the effort of creating the database and then use it for one patient. You could, but nobody is going to do this, because part of the point of having a database is to aggregate and index data across your whole organisation. Databases work fine within the walls of your organisation. But the problem comes when you try to interoperate this database with other databases at other organisations. Even where organisations have the exact same EHR deployed, the local deployment customisations that have inevitably been made make it hard (if not impossible) to move data around. If you can move data, there is usually some work involved in 'translating' the data from one database to another. And this has to be done between every single organisation and for every item of data. This rapidly becomes unworkable. Some people think the solution to this is simply to make the databases BIGGER . But that just moves the problem rather than solving it. You simply trade local inter-organisational interoperability problems for different and harder problems at regional, national, or international, (or interplanetary) scale. We have to change the paradigm, and I think GitEHR is the start of the road for that change. We need an interoperable and extensible file format for medical records. It will be an open standard and the reference implementation will be open source. Many other implementations can exist. Many platforms for the reading, writing, and processing of these records can exist. It will solve the problem of interoperability and will make a start on solving many other unsolved problems of health technology.","title":"Databases are Organisation-centric By Definition"},{"location":"introduction/Databasechester/","text":"Databasechester To try to explain why I have come to the conclusion that #DatabasesAreHarmful and #FilesAreTheAnswer Join me in imagining my fictional city Databasechester in which there is no such thing as a document file format. Every organisation keeps its internal documents in a database inside its organisation. And of course this works adequately well, inside their organisation . Putting aside the fact that they are locked in to their vendor But now, in our fictional city, the local Council want to send documents to the Fire Department. But the Fire Department have their own, different, document management database. So the Council have to commission development of some software to 'translate' a Council document into a Fire Department document. It kind of works, but it was expensive to have built, and there are features in the Council's system that can't be represented accurately in the Fire Department system, so the translation is ' lossy '. But in some way the bulk of the communication gets through and the Council can now send a document to the Fire Department. So far so awful. But now the Fire Department needs to send a reply. Problem. They also now need to commission a piece of software to convert from their internal document database to the Council's. More expense and difficulty ensue, but after a while the Fire Department finally now has the ability to communicate back to the Council. But - there is also the Police Department to communicate with. More software is commissioned by both organisations. As the Council needs to communicate with more and more departments and teams, the amount of work increases rapidly, creating huge costs and delays, and also creating lossy , poor quality communication. Nobody would be surprised if a city which managed simple documents like this could achieve very little, despite huge amounts of money being spent on interoperability. Is this starting so sound familiar to anyone working in health tech?","title":"Databasechester"},{"location":"introduction/Databasechester/#databasechester","text":"To try to explain why I have come to the conclusion that #DatabasesAreHarmful and #FilesAreTheAnswer Join me in imagining my fictional city Databasechester in which there is no such thing as a document file format. Every organisation keeps its internal documents in a database inside its organisation. And of course this works adequately well, inside their organisation . Putting aside the fact that they are locked in to their vendor But now, in our fictional city, the local Council want to send documents to the Fire Department. But the Fire Department have their own, different, document management database. So the Council have to commission development of some software to 'translate' a Council document into a Fire Department document. It kind of works, but it was expensive to have built, and there are features in the Council's system that can't be represented accurately in the Fire Department system, so the translation is ' lossy '. But in some way the bulk of the communication gets through and the Council can now send a document to the Fire Department. So far so awful. But now the Fire Department needs to send a reply. Problem. They also now need to commission a piece of software to convert from their internal document database to the Council's. More expense and difficulty ensue, but after a while the Fire Department finally now has the ability to communicate back to the Council. But - there is also the Police Department to communicate with. More software is commissioned by both organisations. As the Council needs to communicate with more and more departments and teams, the amount of work increases rapidly, creating huge costs and delays, and also creating lossy , poor quality communication. Nobody would be surprised if a city which managed simple documents like this could achieve very little, despite huge amounts of money being spent on interoperability. Is this starting so sound familiar to anyone working in health tech?","title":"Databasechester"},{"location":"introduction/about/","text":"About GitEHR GitEHR is the product of over a decade of learning and thought within the health technology industry, trying to find a solution for a life-long clinical record which is inherently patient-centric and did not have the interoperability problems of other types of health record. The story of GitEHR As a clinician starting to become interested in health tech in ~2011, just as the National Project for IT ( NPfIT ) was collapsing, I found it really difficult to find a 'way in' to the world of GP IT . Clinicians, it seemed, were not wanted, in a world which was dominated by large companies delivering software which was unusable and 'legacy' from day one. Eventually I found two ways in: NHS Hack Day, and the RCGP Health Informatics Group. These were my starting points, but since then I've been almost full-time in health informatics, in a range of roles from the unorthodox: freelance General Hacktitioner to the very much orthodox: Chair of the RCGP Health Informatics Group (HIG) I've had a somewhat unusual Clinical Informatics career in that I've also learned a lot about the technical underpinnings of the software. Unlike many clinicial informaticians and NHS digerati, I learned to write code and become deeply technical, giving me a different way to view the proffered health tech solutions which are out there. What I couldn't understand is that every single current health tech solution is database-backed , and thereby inherently organisation-centric . This includes solutions such as FHIR and OpenEHR , are designed to improve interoperability, however because they are still centralised and organisation-centric , database-backed solutions then they fall into the same trap as all the others. It doesn't matter how large you make the organisations, eventually all organisations have their 'edges', and it is at the edges where you hit absolute and unresolvable problems of interoperability. I've been puzzling this over for a decade, wondering if there can be a solution for this, and all the time learning more about how the tech world works, and what existing solutions can be brought into health from the wider tech world. I've been using Git as a DVCS for around ten years as well, and it took me a long time for the penny to drop that what were experiencing in healthcare is the identical parallel of the CVS vs DVCS debate of 15-20 years ago in 'normal' tech. A debate that was unequivocally won by DVCS . Right at the beginning of my health tech journey, I remember googling 'medical file format' because I thought maybe the solution was in this area. I didn't find much of use except some barmy XML dialect, and over time when I discussed files with technology people they were very disparaging about files, and pointed to all the work that was around databases. It's taken me all this time to learn about those systems and eventually come full circle right back to where I started. Files are the answer. In some ways it feels like starting completely from scratch again. In some ways it is. It doesn't mean we have to throw out everything that happened in the world of healthcare interoperability in the interim though. For example, we can learn a lot from FHIR and OpenEHR that will help to inform the structure of a health record. Tip If it helps, you can do what my friend Kevin Monk did and realised that a file is like a 'mini database all of its own', on a disk. And now relax. About Marcus Baw I'm a GP in North Yorkshire, which is in the continent of Europe. I'm a proud Yorkshireman. I am a father, a guitarist, and a mountain biker although not necessarily in that order. I qualified in Medicine from the University of Liverpool in 2000 and spent around 10 years in acute hospital specialities (Emergency Medicine, Anaesthesia and ICU) mostly in the Liverpool and Manchester region before deciding to change career paths and completing GP training in Wigan in 2011. I'm a self taught software developer, so you are almost certainly better than me. Somewhere between programming and clinical medicine is a nebulous area called Clinical Informatics. I was the Chair of the RCGP Health Informatics Group right through the COVID pandemic (2019-2022), and I'm a Fellow of the Faculty of Clinical Informatics. twitter: @marcus_baw github: pacharanero","title":"About GitEHR"},{"location":"introduction/about/#about-gitehr","text":"GitEHR is the product of over a decade of learning and thought within the health technology industry, trying to find a solution for a life-long clinical record which is inherently patient-centric and did not have the interoperability problems of other types of health record.","title":"About GitEHR"},{"location":"introduction/about/#the-story-of-gitehr","text":"As a clinician starting to become interested in health tech in ~2011, just as the National Project for IT ( NPfIT ) was collapsing, I found it really difficult to find a 'way in' to the world of GP IT . Clinicians, it seemed, were not wanted, in a world which was dominated by large companies delivering software which was unusable and 'legacy' from day one. Eventually I found two ways in: NHS Hack Day, and the RCGP Health Informatics Group. These were my starting points, but since then I've been almost full-time in health informatics, in a range of roles from the unorthodox: freelance General Hacktitioner to the very much orthodox: Chair of the RCGP Health Informatics Group (HIG) I've had a somewhat unusual Clinical Informatics career in that I've also learned a lot about the technical underpinnings of the software. Unlike many clinicial informaticians and NHS digerati, I learned to write code and become deeply technical, giving me a different way to view the proffered health tech solutions which are out there. What I couldn't understand is that every single current health tech solution is database-backed , and thereby inherently organisation-centric . This includes solutions such as FHIR and OpenEHR , are designed to improve interoperability, however because they are still centralised and organisation-centric , database-backed solutions then they fall into the same trap as all the others. It doesn't matter how large you make the organisations, eventually all organisations have their 'edges', and it is at the edges where you hit absolute and unresolvable problems of interoperability. I've been puzzling this over for a decade, wondering if there can be a solution for this, and all the time learning more about how the tech world works, and what existing solutions can be brought into health from the wider tech world. I've been using Git as a DVCS for around ten years as well, and it took me a long time for the penny to drop that what were experiencing in healthcare is the identical parallel of the CVS vs DVCS debate of 15-20 years ago in 'normal' tech. A debate that was unequivocally won by DVCS . Right at the beginning of my health tech journey, I remember googling 'medical file format' because I thought maybe the solution was in this area. I didn't find much of use except some barmy XML dialect, and over time when I discussed files with technology people they were very disparaging about files, and pointed to all the work that was around databases. It's taken me all this time to learn about those systems and eventually come full circle right back to where I started. Files are the answer. In some ways it feels like starting completely from scratch again. In some ways it is. It doesn't mean we have to throw out everything that happened in the world of healthcare interoperability in the interim though. For example, we can learn a lot from FHIR and OpenEHR that will help to inform the structure of a health record. Tip If it helps, you can do what my friend Kevin Monk did and realised that a file is like a 'mini database all of its own', on a disk. And now relax.","title":"The story of GitEHR"},{"location":"introduction/about/#about-marcus-baw","text":"I'm a GP in North Yorkshire, which is in the continent of Europe. I'm a proud Yorkshireman. I am a father, a guitarist, and a mountain biker although not necessarily in that order. I qualified in Medicine from the University of Liverpool in 2000 and spent around 10 years in acute hospital specialities (Emergency Medicine, Anaesthesia and ICU) mostly in the Liverpool and Manchester region before deciding to change career paths and completing GP training in Wigan in 2011. I'm a self taught software developer, so you are almost certainly better than me. Somewhere between programming and clinical medicine is a nebulous area called Clinical Informatics. I was the Chair of the RCGP Health Informatics Group right through the COVID pandemic (2019-2022), and I'm a Fellow of the Faculty of Clinical Informatics. twitter: @marcus_baw github: pacharanero","title":"About Marcus Baw"},{"location":"specification/specification/","text":"","title":"Specification"}]}